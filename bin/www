var app = require('../app');
var http = require('http');
var https = require("https");
var fs = require("fs");
//require('../src/model/db');

var port = normalizePort(process.env.PORT || '7037');

const NODE_ENV = process.env.NODE_ENV ?
    process.env.NODE_ENV.toLowerCase() :
    'development';

app.set('port', port);

var server = NODE_ENV == "production" || NODE_ENV == "staging" ?
    https.createServer({
        key: fs.readFileSync(process.env.KEY_FILE),
        cert: fs.readFileSync(process.env.CERT_FILE)
    }, app) :
    http.createServer(app);


server.listen(port);
server.on('error', onError);
server.on('listening', onlistening);

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.log(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.log(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onlistening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    console.log('Listening on ' + bind + ' in ' + NODE_ENV);
}
